{"pageProps":{"pageDocs":[{"title":"RGM - React Google Map","order":1,"source":"// @flow\n\nimport * as React from 'react';\nimport { Map, Overlay, Marker } from 'rgm';\nimport { css } from '@emotion/core';\nimport { useGoogleApiLoader } from '../dev-src/hooks';\nimport { Ratio } from '../dev-src/controls';\n\n// https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions\nconst MAP_OPTIONS = {\n  zoom: 9,\n  center: {\n    lat: 59.936,\n    lng: 30.314,\n  },\n  gestureHandling: 'greedy',\n  clickableIcons: false,\n};\n\nexport default function Rgm() {\n  const api = useGoogleApiLoader();\n\n  return (\n    <Ratio value={3 / 4}>\n      {api && (\n        <Map api={api} options={MAP_OPTIONS}>\n          <Overlay>\n            <Marker lat={MAP_OPTIONS.center.lat} lng={MAP_OPTIONS.center.lng}>\n              <CircleMarker />\n            </Marker>\n          </Overlay>\n        </Map>\n      )}\n    </Ratio>\n  );\n}\n\nconst CircleMarker = () => (\n  <div\n    css={css`\n      place-self: center center;\n      width: 50px;\n      height: 50px;\n      border-radius: 100%;\n      background-color: white;\n      border: 3px solid red;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n    `}\n  >\n    RGM\n  </div>\n);\n\n","pathname":"/","markdown":" <!-- {\"order\": 1} -->\n<h1>RGM - React Google Map</h1>\n<p>Tiny but very powerful React Google Map.\nIt allows you to render any React component on the Google Map,\nand provides easy access to native google map api.</p>\n<p>minimal example.</p>\n"},{"title":"Native google marker","order":2,"source":"// @flow\n\nimport * as React from 'react';\nimport { Map, useMap } from 'rgm';\nimport { useGoogleApiLoader } from '../dev-src/hooks';\nimport { Ratio } from '../dev-src/controls';\n\n// https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions\nconst MAP_OPTIONS = {\n  zoom: 9,\n  center: {\n    lat: 59.936,\n    lng: 30.314,\n  },\n};\n\ntype MarkerProps = {|\n  lat: number,\n  lng: number,\n|};\n\nexport const GoogleMarker = ({ lat, lng }: MarkerProps) => {\n  const { api, map } = useMap();\n\n  React.useEffect(() => {\n    if (api) {\n      const marker = new api.Marker({\n        map,\n        position: {\n          lat,\n          lng,\n        },\n      });\n\n      return () => {\n        marker.setMap(null);\n      };\n    }\n  }, [api, map, lat, lng]);\n\n  return null;\n};\n\nexport default function GoogleMarkerPage() {\n  const api = useGoogleApiLoader();\n\n  return (\n    <Ratio value={3 / 4}>\n      {api && (\n        <Map api={api} options={MAP_OPTIONS}>\n          <GoogleMarker\n            lat={MAP_OPTIONS.center.lat}\n            lng={MAP_OPTIONS.center.lng}\n          />\n        </Map>\n      )}\n    </Ratio>\n  );\n}\n\n","pathname":"/google-marker","markdown":" <!-- {\"order\": 2} -->\n<h1>Native google marker</h1>\n<p>Get instances of <a href=\"https://developers.google.com/maps/documentation/javascript/reference/map\">google.maps.Map</a>\nclass and instance of <em>google.maps</em> using <em>useMap</em> hook.</p>\n<p>Then as like as in <a href=\"https://developers.google.com/maps/documentation/javascript/adding-a-google-map\">example here</a>\njust add marker using <em>React.useEffect</em> hook</p>\n<p>You can ask why not to expose it with the library.\nSee the <a href=\"https://developers.google.com/maps/documentation/javascript/reference/marker#Marker\">api surface of Google marker</a>\nThe final component may be huge and not solve all the cases.</p>\n"},{"title":"Show geojson","order":3,"source":"// @flow\n\nimport * as React from 'react';\nimport { Map, useMap } from 'rgm';\nimport { useGoogleApiLoader } from '../dev-src/hooks';\nimport { Ratio } from '../dev-src/controls';\n\n// https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions\nconst MAP_OPTIONS = {\n  zoom: 13,\n  center: {\n    lat: 46.22212,\n    lng: 6.14156,\n  },\n  // disable cmd-zoom and 2 fingers zoom I personally dislike it\n  gestureHandling: 'greedy',\n  clickableIcons: false,\n};\n\nconst BG_STYLE = {\n  fillColor: 'transparent',\n  strokeColor: 'white',\n  strokeWeight: 6,\n  strokeOpacity: 1,\n  cursor: 'hand',\n};\n\nconst FG_STYLE = {\n  fillColor: 'transparent',\n  strokeColor: 'blue',\n  strokeWeight: 2,\n  strokeOpacity: 1,\n  cursor: 'hand',\n};\n\n// https://developers.google.com/maps/documentation/javascript/datalayer\n// https://developers.google.com/maps/documentation/javascript/reference/data\nconst GeoJson = ({ children }) => {\n  const { map } = useMap();\n\n  React.useEffect(() => {\n    if (map) {\n      let style = BG_STYLE;\n      // To prevent style blink we override style inside addListener\n      const addFeatureListener = map.data.addListener('addfeature', event => {\n        map.data.overrideStyle(event.feature, style);\n      });\n\n      const features = [];\n      // Add background white shaped border for better visibility\n      features.push(...map.data.addGeoJson(children));\n\n      // Add foreground  thinner border with primary color\n      style = FG_STYLE;\n      features.push(...map.data.addGeoJson(children));\n\n      addFeatureListener.remove();\n\n      return () => {\n        features.forEach(feature => map.data.remove(feature));\n      };\n    }\n  }, [map, children]);\n\n  return null;\n};\n\nexport default function GeoJSONPage() {\n  const api = useGoogleApiLoader();\n\n  return (\n    <Ratio value={3 / 4}>\n      {api && (\n        <Map api={api} options={MAP_OPTIONS}>\n          <GeoJson>{geoJSON}</GeoJson>\n        </Map>\n      )}\n    </Ratio>\n  );\n}\n\nconst geoJSON = {\n  type: 'Feature',\n  geometry: {\n    type: 'MultiPolygon',\n    coordinates: [\n      [\n        [\n          [6.166701, 46.224467],\n          [6.165925, 46.222455],\n          [6.1619, 46.215224],\n          [6.155766, 46.217359],\n          [6.151245, 46.216282],\n          [6.151087, 46.215332],\n          [6.150485, 46.215169],\n          [6.1509, 46.214227],\n          [6.150811, 46.214036],\n          [6.14938, 46.214312],\n          [6.149151, 46.214004],\n          [6.1494, 46.213891],\n          [6.148978, 46.213333],\n          [6.149199, 46.213245],\n          [6.149111, 46.213092],\n          [6.148458, 46.213299],\n          [6.148611, 46.213478],\n          [6.148046, 46.213725],\n          [6.14791, 46.213552],\n          [6.146289, 46.214207],\n          [6.146402, 46.214354],\n          [6.146021, 46.214516],\n          [6.145856, 46.214388],\n          [6.145229, 46.214795],\n          [6.145365, 46.214889],\n          [6.144523, 46.215537],\n          [6.140424, 46.215467],\n          [6.140431, 46.214992],\n          [6.140001, 46.214473],\n          [6.140495, 46.21431],\n          [6.140344, 46.213461],\n          [6.139154, 46.211822],\n          [6.138298, 46.212118],\n          [6.137611, 46.212103],\n          [6.137077, 46.212714],\n          [6.136788, 46.212579],\n          [6.136173, 46.21166],\n          [6.136793, 46.21125],\n          [6.136433, 46.210877],\n          [6.135918, 46.210767],\n          [6.136631, 46.210466],\n          [6.136455, 46.210278],\n          [6.135874, 46.210503],\n          [6.135143, 46.210281],\n          [6.135855, 46.209982],\n          [6.135933, 46.208969],\n          [6.135134, 46.20892],\n          [6.135138, 46.20837],\n          [6.1349, 46.208432],\n          [6.134884, 46.208718],\n          [6.133399, 46.209087],\n          [6.133291, 46.20889],\n          [6.132011, 46.209076],\n          [6.131403, 46.209387],\n          [6.131373, 46.209693],\n          [6.130356, 46.210561],\n          [6.129696, 46.210564],\n          [6.12969, 46.210818],\n          [6.129369, 46.21082],\n          [6.129375, 46.211045],\n          [6.129688, 46.211046],\n          [6.129688, 46.211504],\n          [6.12927, 46.211496],\n          [6.129271, 46.212405],\n          [6.129008, 46.212523],\n          [6.129764, 46.213246],\n          [6.129716, 46.213667],\n          [6.128841, 46.213665],\n          [6.127625, 46.214193],\n          [6.126112, 46.214342],\n          [6.125746, 46.214032],\n          [6.123964, 46.214867],\n          [6.124292, 46.215172],\n          [6.121739, 46.215671],\n          [6.119726, 46.216991],\n          [6.120624, 46.217769],\n          [6.122338, 46.216739],\n          [6.123393, 46.21744],\n          [6.124565, 46.217508],\n          [6.125727, 46.218289],\n          [6.126099, 46.218014],\n          [6.127509, 46.219169],\n          [6.128824, 46.220001],\n          [6.129532, 46.219521],\n          [6.129983, 46.219778],\n          [6.129575, 46.22013],\n          [6.130436, 46.220747],\n          [6.130256, 46.220853],\n          [6.130676, 46.221195],\n          [6.130523, 46.221425],\n          [6.130902, 46.221833],\n          [6.13211, 46.221023],\n          [6.13235, 46.221201],\n          [6.132201, 46.221296],\n          [6.133093, 46.221871],\n          [6.132963, 46.221989],\n          [6.133836, 46.222724],\n          [6.132913, 46.223371],\n          [6.133926, 46.224313],\n          [6.132755, 46.22515],\n          [6.131471, 46.22413],\n          [6.131008, 46.224101],\n          [6.129367, 46.225315],\n          [6.128872, 46.225032],\n          [6.127637, 46.22607],\n          [6.127951, 46.226179],\n          [6.128475, 46.225855],\n          [6.130178, 46.227029],\n          [6.12872, 46.228056],\n          [6.127686, 46.227353],\n          [6.126543, 46.22806],\n          [6.127468, 46.228897],\n          [6.127947, 46.2286],\n          [6.128718, 46.228867],\n          [6.131004, 46.230645],\n          [6.131211, 46.230302],\n          [6.132606, 46.230318],\n          [6.133546, 46.231009],\n          [6.133079, 46.231614],\n          [6.132808, 46.231513],\n          [6.132062, 46.232115],\n          [6.132336, 46.232319],\n          [6.131997, 46.232603],\n          [6.132238, 46.232774],\n          [6.131869, 46.233055],\n          [6.132281, 46.233307],\n          [6.132955, 46.23278],\n          [6.134405, 46.233909],\n          [6.135986, 46.234248],\n          [6.136307, 46.234193],\n          [6.137361, 46.233404],\n          [6.13613, 46.232762],\n          [6.136964, 46.231991],\n          [6.138166, 46.231296],\n          [6.135923, 46.230627],\n          [6.136604, 46.230069],\n          [6.13744, 46.228493],\n          [6.137943, 46.228181],\n          [6.139237, 46.228034],\n          [6.13947, 46.228662],\n          [6.138837, 46.228839],\n          [6.138821, 46.22961],\n          [6.138533, 46.230292],\n          [6.142864, 46.2293],\n          [6.143428, 46.230636],\n          [6.143698, 46.230099],\n          [6.145883, 46.228727],\n          [6.145576, 46.227293],\n          [6.146152, 46.226945],\n          [6.146293, 46.227101],\n          [6.146995, 46.226354],\n          [6.148206, 46.226053],\n          [6.148941, 46.227792],\n          [6.166701, 46.224467],\n        ],\n      ],\n    ],\n  },\n};\n\n","pathname":"/geojson","markdown":" <!-- {\"order\": 3} -->\n<h1>Show geojson</h1>\n<p>Get instances of <a href=\"https://developers.google.com/maps/documentation/javascript/reference/map\">google.maps.Map</a>\nclass and instance of <em>google.maps</em> using <em>useMap</em> hook.</p>\n<p>Then using <a href=\"https://developers.google.com/maps/documentation/javascript/datalayer\">google api datalayer</a> and\n<a href=\"https://developers.google.com/maps/documentation/javascript/reference/data\">api reference</a>\njust add geojson using <em>React.useEffect</em> hook</p>\n"},{"title":"Events","order":4,"source":"// @flow\n\nimport * as React from 'react';\nimport { Map } from 'rgm';\nimport { useGoogleApiLoader } from '../dev-src/hooks';\nimport { Ratio, Info } from '../dev-src/controls';\n\n// https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions\nconst MAP_OPTIONS = {\n  zoom: 9,\n  center: {\n    lat: 59.936,\n    lng: 30.314,\n  },\n};\n\nexport default function Events() {\n  const api = useGoogleApiLoader();\n  const [bounds, setBounds] = React.useState(null);\n  const [map, setMap] = React.useState(null);\n\n  React.useEffect(() => {\n    if (map != null) {\n      const boundsChangedListener = map.addListener('bounds_changed', () => {\n        const bounds = map.getBounds();\n        setBounds(bounds);\n      });\n\n      return () => {\n        boundsChangedListener.remove();\n      };\n    }\n  }, [map]);\n\n  return (\n    <div>\n      <Ratio value={3 / 4}>\n        {api && <Map ref={setMap} api={api} options={MAP_OPTIONS} />}\n      </Ratio>\n\n      <Info>{bounds?.getCenter().toString() ?? ' '}</Info>\n    </div>\n  );\n}\n\n","pathname":"/events","markdown":" <!-- {\"order\": 4} -->\n<h1>Events</h1>\n<p>Get instance of <a href=\"https://developers.google.com/maps/documentation/javascript/reference/map\">google.maps.Map</a>\nclass using <em>ref</em> property or <em>useMap</em> hook.\nThen subscribe on any <a href=\"https://developers.google.com/maps/documentation/javascript/events\">event</a>\ninside <em>useEffect</em> hook using <em>addListener</em>.</p>\n<p>Don't forget to unsubscribe in <em>useEffect</em> cleanup.</p>\n<blockquote>\n<p>Sometimes google map fires events like <em>idle</em> in a wrong order,\nusually wrapping callback into 2 rafs helps.</p>\n</blockquote>\n<blockquote>\n<p>Don't use code below in production, it's better to intercept bounds changes inside <em>idle</em> event.</p>\n</blockquote>\n"},{"title":"Google map methods","order":5,"source":"// @flow\n\nimport * as React from 'react';\nimport { Map } from 'rgm';\nimport { Flex, Box } from 'react-system';\nimport { useGoogleApiLoader } from '../dev-src/hooks';\nimport { Ratio } from '../dev-src/controls';\n\n// https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions\nconst MAP_OPTIONS = {\n  zoom: 9,\n  center: {\n    lat: 59.936,\n    lng: 30.314,\n  },\n};\n\nconst getSize = elt => {\n  const rect = elt.getBoundingClientRect();\n  return {\n    width: rect.width,\n    height: rect.height,\n  };\n};\n\nexport default function Imperative() {\n  const api = useGoogleApiLoader();\n  const [map, setMap] = React.useState(null);\n  const getOptions = React.useCallback(\n    elt =>\n      getSize(elt).width < 500\n        ? { ...MAP_OPTIONS, disableDefaultUI: true }\n        : MAP_OPTIONS,\n    [],\n  );\n\n  return (\n    <div>\n      <Flex p={3}>\n        <button\n          onClick={() => {\n            map?.panBy(\n              200 * (Math.random() - 0.5),\n              200 * (Math.random() - 0.5),\n            );\n          }}\n        >\n          Move\n        </button>\n        <Box width={'16px'} />\n        <button\n          onClick={() => {\n            map?.setOptions({\n              disableDefaultUI: true,\n            });\n          }}\n        >\n          Disable ui\n        </button>\n        <Box width={'16px'} />\n        <button\n          onClick={() => {\n            map?.setOptions({\n              disableDefaultUI: false,\n            });\n          }}\n        >\n          Enable ui\n        </button>\n      </Flex>\n      <Ratio value={3 / 4}>\n        {api && <Map ref={setMap} api={api} options={getOptions}></Map>}\n      </Ratio>\n    </div>\n  );\n}\n\n","pathname":"/imperative","markdown":" <!-- {\"order\": 5} -->\n<h1>Google map methods</h1>\n<p>As like as using <em>useMap</em> at <em>Map</em> children Components you can\nuse ref to map instance and apply any operation on\n<a href=\"https://developers.google.com/maps/documentation/javascript/reference/map\">google map instance</a> imperatively.</p>\n<p>Using <em>ref</em> and <em>useEffect</em> you can make any property controllable if needed.</p>\n"},{"title":"React markers","order":6,"source":"// @flow\n\nimport * as React from 'react';\nimport { Map, Overlay, Marker } from 'rgm';\nimport { Flex, Box } from 'react-system';\nimport { useGoogleApiLoader } from '../dev-src/hooks';\nimport { Ratio, Checkbox, Select } from '../dev-src/controls';\n\n// https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions\nconst MAP_OPTIONS = {\n  zoom: 9,\n  center: {\n    lat: 59.936,\n    lng: 30.314,\n  },\n  // disable cmd-zoom and 2 fingers zoom I personally dislike it\n  gestureHandling: 'greedy',\n  clickableIcons: false,\n};\n\nexport default function MarkerPage() {\n  const api = useGoogleApiLoader();\n\n  const [debug, setDebug] = React.useState(true);\n  const [alignSelf, setAlignSelf] = React.useState('end');\n  const [justifySelf, setJustifySelf] = React.useState('center');\n\n  return (\n    <div>\n      <Flex p={3} alignItems=\"baseline\">\n        <Checkbox id=\"debug\" value={debug} onChange={setDebug}>\n          Debug\n        </Checkbox>\n        <Box width={'8px'} />\n        <Select\n          value={alignSelf}\n          onChange={setAlignSelf}\n          options={['start', 'center', 'end']}\n        />\n        <Box width={'8px'} />\n        <Select\n          value={justifySelf}\n          onChange={setJustifySelf}\n          options={['start', 'center', 'end']}\n        />\n      </Flex>\n\n      <Ratio value={3 / 4}>\n        {api && (\n          <Map api={api} options={MAP_OPTIONS}>\n            <Overlay debug={debug}>\n              <Marker lat={MAP_OPTIONS.center.lat} lng={MAP_OPTIONS.center.lng}>\n                <MarkerBottom\n                  style={{\n                    alignSelf,\n                    justifySelf,\n                    // easier to use placeSelf\n                  }}\n                  size={48}\n                  color={'red'}\n                />\n              </Marker>\n              <Marker\n                lat={MAP_OPTIONS.center.lat + 0.1}\n                lng={MAP_OPTIONS.center.lng + 0.3}\n              >\n                <MarkerCentered\n                  style={{\n                    alignSelf,\n                    justifySelf,\n                  }}\n                  size={48}\n                  color={'Fuchsia'}\n                />\n              </Marker>\n              <Marker\n                lat={MAP_OPTIONS.center.lat - 0.1}\n                lng={MAP_OPTIONS.center.lng - 0.3}\n              >\n                <MarkerCorner\n                  style={{\n                    alignSelf,\n                    justifySelf,\n                  }}\n                  size={48}\n                  color={'OrangeRed'}\n                />\n              </Marker>\n            </Overlay>\n          </Map>\n        )}\n      </Ratio>\n    </div>\n  );\n}\n\nconst MarkerBottom = ({ size, color, style }) => (\n  <svg\n    style={style}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height={size}\n    width={size}\n    viewBox=\"2 2 20 20\"\n    fill={color}\n  >\n    <path d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\" />\n    <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n  </svg>\n);\n\nconst MarkerCentered = ({ size, color, style }) => (\n  <svg\n    style={style}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height={size}\n    viewBox=\"0 0 24 24\"\n    width={size}\n    fill={color}\n  >\n    <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n    <path d=\"M12 8c-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4-1.79-4-4-4zm8.94 3c-.46-4.17-3.77-7.48-7.94-7.94V1h-2v2.06C6.83 3.52 3.52 6.83 3.06 11H1v2h2.06c.46 4.17 3.77 7.48 7.94 7.94V23h2v-2.06c4.17-.46 7.48-3.77 7.94-7.94H23v-2h-2.06zM12 19c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z\" />\n  </svg>\n);\n\nconst MarkerCorner = ({ size, color, style }) => (\n  <svg\n    style={style}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height={size}\n    viewBox=\"3 3 18 18\"\n    width={size}\n    fill={color}\n  >\n    <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n    <path d=\"M21 3L3 10.53v.98l6.84 2.65L12.48 21h.98L21 3z\" />\n  </svg>\n);\n\n","pathname":"/react-markers","markdown":" <!-- {\"order\": 6} -->\n<h1>React markers</h1>\n<p>Fast, rerendering of markers is not occured during move/zoom operation\n<em>(if you dont update state on bounds, etc change events, <a href=\"/events\">see idle quote</a>)</em></p>\n<p>To add custom React marker on map, you need 2 controls <em>Overlay</em> and <em>Marker</em>.</p>\n<p><a href=\"https://developers.google.com/maps/documentation/javascript/examples/overlay-simple\">Overlay</a>\nis needed to place React components inside.</p>\n<p><em>Marker</em> is a wrapper around your component\nto pass <em>lat</em>, <em>lng</em> into <em>Overlay</em> in a type safe way wihout touching props of your component.</p>\n<p>Each marker is rendered inside placeholder with <em>{ width:0; height:0; display: grid }</em> style.\nThis allows to select origin point of marker using only its\nown css <em>place-self</em>, <em>align-self</em>, <em>justify-self</em> properties.\nAlso <em>{ position: absolute }</em> on a holder allows everything if grid positioning is not enough.</p>\n<p>To simplify markers positioning you can use <em>debug</em> propery of <em>Overlay</em> element.\nIt will show exact origin point position.</p>\n<p>See below how to use <em>Overlay</em> and <em>Marker</em>.</p>\n<p>Also play with <em>debug</em> property to see how you can use\ncss <em>alignSelf</em> , <em>justifySelf</em>, <em>placeSelf</em> properties to align different kind of markers.\n<em>(For markers with &quot;fun&quot; shape use <em>position:relative</em> and css left, right properties)</em></p>\n<blockquote>\n<p><em>debug</em> property won't work in production builds.</p>\n</blockquote>\n"},{"title":"Clusters example","order":7,"source":"// @flow\n\nimport * as React from 'react';\nimport { Map, Overlay, Marker } from 'rgm';\nimport { css } from '@emotion/core';\n// $FlowFixMe\nimport Supercluster from 'supercluster';\nimport { useGoogleApiLoader } from '../dev-src/hooks';\nimport { Ratio } from '../dev-src/controls';\nimport { getScreenOffset } from '../dev-src/geo-utils';\n// $FlowFixMe\nimport places from '../data/places.json';\n\nconst superclusterIndex = new Supercluster({\n  log: false,\n  radius: 60,\n  extent: 256,\n  maxZoom: 17,\n}).load(places.features);\n\n// https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions\nconst MAP_OPTIONS = {\n  zoom: 1,\n  maxZoom: 17,\n  center: {\n    lat: 0,\n    lng: 30.304,\n  },\n  // disable cmd-zoom and 2 fingers zoom I personally dislike it\n  gestureHandling: 'greedy',\n  clickableIcons: false,\n};\n\ntype Cluster = {|\n  geometry: {|\n    coordinates: [number, number],\n  |},\n  id?: number,\n  properties: {|\n    cluster?: boolean,\n    cluster_id?: number,\n    point_count?: number,\n  |},\n|};\n\n// Google has no \"zoom at point\" method\nconst zoomAt = (map, pt, zoom) => {\n  const center = map.getCenter();\n  const centerLatLng = {\n    lat: center.lat(),\n    lng: center.lng(),\n  };\n  const offsetA = getScreenOffset(pt, centerLatLng, map.getZoom());\n  const offsetB = getScreenOffset(pt, centerLatLng, zoom);\n  const x = offsetA.x - offsetB.x;\n  const y = offsetA.y - offsetB.y;\n  map.setZoom(zoom);\n  map.panBy(x, y);\n};\n\nexport default function Clusters() {\n  const api = useGoogleApiLoader();\n  const [map, setMap] = React.useState(null);\n  const [clusters, setClusters] = React.useState<$ReadOnlyArray<Cluster>>([]);\n\n  React.useEffect(() => {\n    if (map != null) {\n      const boundsChangedListener = map.addListener('idle', () => {\n        const bounds = map.getBounds();\n        const zoom = map.getZoom();\n        const sw = bounds.getSouthWest();\n        const ne = bounds.getNorthEast();\n\n        const swA = [sw.lng(), sw.lat()];\n        const neA = [ne.lng(), ne.lat()];\n        // Supercluster don't work in some cases, fix it\n        if (swA[0] > neA[0] && swA[0] - neA[0] < 0.00001) {\n          swA[0] = -180;\n          neA[0] = 180;\n        }\n\n        const clusters = superclusterIndex.getClusters([...swA, ...neA], zoom);\n\n        setClusters(clusters);\n      });\n\n      return () => {\n        boundsChangedListener.remove();\n      };\n    }\n  }, [map]);\n\n  return (\n    <Ratio value={3 / 4}>\n      {api && (\n        <Map ref={setMap} api={api} options={MAP_OPTIONS}>\n          <Overlay debug={false}>\n            {clusters.map(cluster => {\n              const [lng, lat] = cluster.geometry.coordinates;\n              return (\n                <Marker key={`${lng} - ${lat}`} lng={lng} lat={lat}>\n                  <ClusterMarker\n                    count={cluster.properties.point_count ?? null}\n                    onClick={() => {\n                      if (map && cluster.id != null) {\n                        zoomAt(\n                          map,\n                          {\n                            lng,\n                            lat,\n                          },\n                          superclusterIndex.getClusterExpansionZoom(cluster.id),\n                        );\n                      }\n                    }}\n                  />\n                </Marker>\n              );\n            })}\n          </Overlay>\n        </Map>\n      )}\n    </Ratio>\n  );\n}\n\n// css is awesome!\nconst ClusterMarker = ({ count, onClick }) => {\n  const text = count ?? '';\n\n  return (\n    <div\n      onClick={onClick}\n      css={css`\n        position: relative;\n        place-self: center center;\n        border-radius: 100%;\n        border: 3px solid #eee;\n        background-color: white;\n        padding: ${count == null ? 2 : 8}px;\n        box-shadow: 0 0 0 2px #fe4a0d, 0 0 0 4px white;\n        &:after {\n          padding-top: 100%;\n          content: ' ';\n          display: block;\n        }\n        font-size: 1rem;\n\n        &:hover {\n          padding: ${count == null ? 3 : 10}px;\n          transition: padding 0.07s ease-out;\n          z-index: 1;\n        }\n        transition: padding 0.07s ease-in;\n        cursor: pointer;\n      `}\n    >\n      <div\n        css={css`\n          height: 0;\n          overflow: hidden;\n        `}\n      >\n        {text}\n      </div>\n      <div\n        css={css`\n          position: absolute;\n          left: 0;\n          top: 0;\n          width: 100%;\n          height: 100%;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        `}\n      >\n        {text}\n      </div>\n    </div>\n  );\n};\n\n","pathname":"/clusters","markdown":" <!-- {\"order\": 7} -->\n<h1>Clusters example</h1>\n<p>Real life example. <em>(clusters, zoom on marker click)</em></p>\n"},{"title":"N markers","order":8,"source":"// @flow\n\nimport * as React from 'react';\nimport { Map, Overlay, Marker } from 'rgm';\nimport { css } from '@emotion/core';\nimport { Flex, Box } from 'react-system';\nimport { useGoogleApiLoader } from '../dev-src/hooks';\nimport { Ratio, Select } from '../dev-src/controls';\n\n// https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions\nconst MAP_OPTIONS = {\n  zoom: 9,\n  center: {\n    lat: 59.936,\n    lng: 30.314,\n  },\n  gestureHandling: 'greedy',\n  clickableIcons: false,\n};\n\nconst genRandomMarkers = n =>\n  Array.from(Array(n), () => {\n    const r = Math.random() * 2 + 0.05;\n    const angle = Math.random() * 2 * Math.PI;\n\n    return {\n      lat: MAP_OPTIONS.center.lat + r * Math.cos(angle),\n      lng: MAP_OPTIONS.center.lng + r * Math.sin(angle),\n    };\n  });\n\nexport default function Performance() {\n  const api = useGoogleApiLoader();\n  const INITIAL_MARKERS_COUNT = 200;\n  const [markers, setMarkers] = React.useState(() =>\n    genRandomMarkers(INITIAL_MARKERS_COUNT),\n  );\n\n  return (\n    <div>\n      <Flex p={3}>\n        <Box pr={2}>Count:</Box>\n        <Select\n          options={['100', '200', '300', '500', '1000', '2000']}\n          value={`${markers.length}`}\n          onChange={v => {\n            setMarkers(genRandomMarkers(Number.parseFloat(v)));\n          }}\n        />\n      </Flex>\n      <Ratio value={3 / 4}>\n        {api && (\n          <Map api={api} options={MAP_OPTIONS}>\n            <Overlay>\n              {markers.map((m, index) => (\n                <Marker key={index} lat={m.lat} lng={m.lng}>\n                  <CircleMarker />\n                </Marker>\n              ))}\n            </Overlay>\n          </Map>\n        )}\n      </Ratio>\n    </div>\n  );\n}\n\nconst CircleMarker = () => (\n  <div\n    css={css`\n      place-self: center center;\n      width: 10px;\n      height: 10px;\n      border-radius: 100%;\n      background-color: white;\n      border: 2px solid red;\n    `}\n  />\n);\n\n","pathname":"/performance","markdown":" <!-- {\"order\": 8 } -->\n<h1>N markers</h1>\n<p>Example of drawing N React markers.</p>\n"},{"title":"N markers (uniq key)","order":100,"source":"// @flow\n\nimport * as React from 'react';\nimport { Map, Overlay, Marker } from 'rgm';\nimport { useGoogleApiLoader } from '../dev-src/hooks';\nimport { Ratio } from '../dev-src/controls';\n\n// https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions\nconst MAP_OPTIONS = {\n  zoom: 9,\n  center: {\n    lat: 59.936,\n    lng: 30.314,\n  },\n  gestureHandling: 'greedy',\n  clickableIcons: false,\n};\n\nlet uniq = 1;\n\nconst genRandomMarkers = n =>\n  Array.from(Array(n), () => ({\n    key: uniq++,\n    lat: MAP_OPTIONS.center.lat + (Math.random() - 0.5) * 2 * 0.6,\n    lng: MAP_OPTIONS.center.lng + (Math.random() - 0.5) * 2 * 0.6,\n  }));\n\nexport default function TestUniq() {\n  const api = useGoogleApiLoader();\n  const INITIAL_MARKERS_COUNT = 200;\n  const [markers, setMarkers] = React.useState(\n    genRandomMarkers(INITIAL_MARKERS_COUNT),\n  );\n\n  React.useEffect(() => {\n    const startTime = new Date();\n    const MARKERS_TO_DELETE = 10;\n    const INTERVAL_TIMEOUT = 100;\n\n    let newCount = MARKERS_TO_DELETE;\n\n    const handle = setInterval(() => {\n      setMarkers(markers => {\n        const dt = (new Date() - startTime) / 1000;\n        if (dt > 30) {\n          newCount = 9;\n        }\n        if (dt > 60) {\n          newCount = 0;\n        }\n\n        const oldMarkers = [...markers];\n\n        // Drop random interval\n        oldMarkers.splice(\n          Math.max(\n            0,\n            Math.floor(Math.random() * oldMarkers.length) - MARKERS_TO_DELETE,\n          ),\n          MARKERS_TO_DELETE,\n        );\n\n        const newMarkers = genRandomMarkers(newCount);\n        const r = [...oldMarkers, ...newMarkers];\n        return r;\n      });\n    }, INTERVAL_TIMEOUT);\n\n    return () => {\n      clearInterval(handle);\n    };\n  }, []);\n\n  return (\n    <Ratio value={3 / 4}>\n      {api && (\n        <Map api={api} options={MAP_OPTIONS}>\n          <Overlay>\n            {markers.map(m => (\n              <Marker key={m.key} lat={m.lat} lng={m.lng}>\n                <SvgMarker\n                  style={{\n                    alignSelf: 'end',\n                    justifySelf: 'center',\n                    // easier to use placeSelf\n                  }}\n                  size={18}\n                  color={'red'}\n                />\n              </Marker>\n            ))}\n          </Overlay>\n        </Map>\n      )}\n    </Ratio>\n  );\n}\n\nconst SvgMarker = ({ size, color, style }) => (\n  <svg\n    style={style}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height={size}\n    width={size}\n    viewBox=\"2 2 20 20\"\n    fill={color}\n  >\n    <path d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\" />\n    <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n  </svg>\n);\n\n","pathname":"/vis-test-n-uniq","markdown":" <!-- {\"order\": 100 } -->\n<h1>N markers (uniq key)</h1>\n<p>Most tests here are visual tests</p>\n<h3>What to do</h3>\n<p>You need to actively move/zoom map until markers exists.</p>\n<h3>What to expect</h3>\n<p>All markers are moving to predictable direction. No markers should stay at the end</p>\n"},{"title":"N markers (key as index)","order":101,"source":"// @flow\n\nimport * as React from 'react';\nimport { Map, Overlay, Marker } from 'rgm';\nimport { useGoogleApiLoader } from '../dev-src/hooks';\nimport { Ratio } from '../dev-src/controls';\n\n// https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions\nconst MAP_OPTIONS = {\n  zoom: 9,\n  center: {\n    lat: 59.936,\n    lng: 30.314,\n  },\n  gestureHandling: 'greedy',\n  clickableIcons: false,\n};\n\nconst genRandomMarkers = n =>\n  Array.from(Array(n), () => ({\n    lat: MAP_OPTIONS.center.lat + (Math.random() - 0.5) * 2 * 0.6,\n    lng: MAP_OPTIONS.center.lng + (Math.random() - 0.5) * 2 * 0.6,\n  }));\n\nexport default function TestIndex() {\n  const api = useGoogleApiLoader();\n  const INITIAL_MARKERS_COUNT = 200;\n  const [markers, setMarkers] = React.useState(\n    genRandomMarkers(INITIAL_MARKERS_COUNT),\n  );\n\n  React.useEffect(() => {\n    const startTime = new Date();\n    const MARKERS_TO_DELETE = 10;\n    const INTERVAL_TIMEOUT = 100;\n\n    let newCount = MARKERS_TO_DELETE;\n\n    const handle = setInterval(() => {\n      setMarkers(markers => {\n        const dt = (new Date() - startTime) / 1000;\n        if (dt > 30) {\n          newCount = 9;\n        }\n        if (dt > 60) {\n          newCount = 0;\n        }\n\n        const oldMarkers = [...markers];\n\n        // Drop random interval\n        oldMarkers.splice(\n          Math.max(\n            0,\n            Math.floor(Math.random() * oldMarkers.length) - MARKERS_TO_DELETE,\n          ),\n          MARKERS_TO_DELETE,\n        );\n\n        const newMarkers = genRandomMarkers(newCount);\n        const r = [...oldMarkers, ...newMarkers];\n        return r;\n      });\n    }, INTERVAL_TIMEOUT);\n\n    return () => {\n      clearInterval(handle);\n    };\n  }, []);\n\n  return (\n    <Ratio value={3 / 4}>\n      {api && (\n        <Map api={api} options={MAP_OPTIONS}>\n          <Overlay>\n            {markers.map((m, index) => (\n              <Marker key={index} lat={m.lat} lng={m.lng}>\n                <SvgMarker\n                  style={{\n                    alignSelf: 'end',\n                    justifySelf: 'center',\n                    // easier to use placeSelf\n                  }}\n                  size={18}\n                  color={'red'}\n                />\n              </Marker>\n            ))}\n          </Overlay>\n        </Map>\n      )}\n    </Ratio>\n  );\n}\n\nconst SvgMarker = ({ size, color, style }) => (\n  <svg\n    style={style}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    height={size}\n    width={size}\n    viewBox=\"2 2 20 20\"\n    fill={color}\n  >\n    <path d=\"M12 2C8.13 2 5 5.13 5 9c0 5.25 7 13 7 13s7-7.75 7-13c0-3.87-3.13-7-7-7zm0 9.5c-1.38 0-2.5-1.12-2.5-2.5s1.12-2.5 2.5-2.5 2.5 1.12 2.5 2.5-1.12 2.5-2.5 2.5z\" />\n    <path d=\"M0 0h24v24H0z\" fill=\"none\" />\n  </svg>\n);\n\n","pathname":"/vis-test-n-index","markdown":" <!-- {\"order\": 101 } -->\n<h1>N markers (key as index)</h1>\n<p>Most tests here are visual tests</p>\n<h3>What to do</h3>\n<p>You need to actively move/zoom map until markers exists.</p>\n<h3>What to expect</h3>\n<p>All markers are moving to predictable direction. No markers should stay at the end</p>\n"}]},"__N_SSG":true}