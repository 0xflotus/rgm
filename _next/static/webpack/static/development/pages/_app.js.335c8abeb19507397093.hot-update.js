webpackHotUpdate("static/development/pages/_app.js",{

/***/ "./dev-src/controls.js":
/*!*****************************!*\
  !*** ./dev-src/controls.js ***!
  \*****************************/
/*! exports provided: Select, Checkbox, Stack, Info, Ratio, Code, Layout, Markdown, MenuLink */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Select", function() { return Select; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Checkbox", function() { return Checkbox; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Stack", function() { return Stack; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Info", function() { return Info; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Ratio", function() { return Ratio; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Code", function() { return Code; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Layout", function() { return Layout; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Markdown", function() { return Markdown; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MenuLink", function() { return MenuLink; });
/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ "./node_modules/@babel/runtime/helpers/esm/extends.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/link */ "./node_modules/next/link.js");
/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/router */ "./node_modules/next/dist/client/router.js");
/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/head */ "./node_modules/next/dist/next-server/lib/head.js");
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @emotion/core */ "./node_modules/@emotion/core/dist/core.browser.esm.js");
/* harmony import */ var typography__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! typography */ "./node_modules/typography/dist/index.js");
/* harmony import */ var typography__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(typography__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var prism_react_renderer__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! prism-react-renderer */ "./node_modules/prism-react-renderer/dist/index.js");
/* harmony import */ var _mixins__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./mixins */ "./dev-src/mixins.js");
/* harmony import */ var _icons__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./icons */ "./dev-src/icons.js");


var _this = undefined,
    _jsxFileName = "/Users/ice/ext/npm/rgm/dev-src/controls.js";

var __jsx = react__WEBPACK_IMPORTED_MODULE_1__["createElement"];

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }






 // $FlowFixMe too many typings





var Select = function Select(props) {
  return (// eslint-disable-next-line
    Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("select", {
      value: props.value,
      onChange: function onChange(e) {
        return props.onChange(e.target.value);
      },
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 20,
        columnNumber: 5
      }
    }, props.options.map(function (o) {
      return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("option", {
        key: o,
        value: o,
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 22,
          columnNumber: 9
        }
      }, o);
    }))
  );
};

var _ref = false ? undefined : {
  name: "v0otzd-Checkbox",
  styles: "display:flex;align-items:baseline;;label:Checkbox;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref2 = false ? undefined : {
  name: "fjiudy-Checkbox",
  styles: "padding-left:4px;;label:Checkbox;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var Checkbox = function Checkbox(props) {
  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("div", {
    css: _ref,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 37,
      columnNumber: 5
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("input", {
    id: props.id,
    type: "checkbox",
    checked: props.value,
    onChange: function onChange(e) {
      return props.onChange(e.target.checked);
    },
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 43,
      columnNumber: 7
    }
  }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("label", {
    css: _ref2,
    htmlFor: props.id,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 49,
      columnNumber: 7
    }
  }, props.children));
};

var _ref3 = false ? undefined : {
  name: "1367rgy-Stack",
  styles: "display:grid;grid-gap:24px;> div:not(:first-of-type),> pre{box-shadow:0 0 0 2px white,0 0 0 3px var(--secondary-color),0 0 0 5px white,0 0 0 6px var(--secondary-color);};label:Stack;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var Stack = function Stack(props) {
  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("div", {
    css: _ref3,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 63,
      columnNumber: 5
    }
  }, props.children);
};

var _ref4 = false ? undefined : {
  name: "dnao36-Info",
  styles: "padding:8px;background-color:#fafafa;;label:Info;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var Info = function Info(props) {
  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("div", {
    css: _ref4,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 81,
      columnNumber: 5
    }
  }, props.children, "\u200B");
};
var Ratio = function Ratio(props) {
  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("div", {
    css: /*#__PURE__*/Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["css"])(Object(_mixins__WEBPACK_IMPORTED_MODULE_8__["ratio"])(props.value), ";label:Ratio;" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 94,
      columnNumber: 5
    }
  }, props.children);
};

var _ref5 = false ? undefined : {
  name: "1fuhogj-Code",
  styles: "pre[class*='language-'],code[class*='language-']{color:#d4d4d4;font-size:0.8rem;text-shadow:none;font-family:Consolas,Monaco,'Andale Mono','Ubuntu Mono',monospace;direction:ltr;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;line-height:1.5;-moz-tab-size:4;-o-tab-size:4;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;}pre[class*='language-']::selection,code[class*='language-']::selection{text-shadow:none;background:#b3d4fc;}@media print{pre[class*='language-'],code[class*='language-']{text-shadow:none;}}pre[class*='language-']{padding:1em;margin:0;overflow:auto;background:#1e1e1e;}:not(pre) > code[class*='language-']{padding:0.1em 0.3em;border-radius:0.3em;color:#db4c69;background:#f9f2f4;}.namespace{opacity:0.7;}.token.comment,.token.prolog,.token.doctype,.token.cdata{color:#6a9955;}.token.punctuation{color:#d4d4d4;}.token.property,.token.tag,.token.boolean,.token.number,.token.constant,.token.symbol,.token.deleted{color:#b5cea8;}.token.selector,.token.attr-name,.token.string,.token.char,.token.builtin,.token.inserted{color:#7dd823;}.token.operator,.token.entity,.token.url,.language-css .token.string,.style .token.string{color:#d4d4d4;background:#1e1e1e;}.token.atrule,.token.attr-value,.token.keyword{color:#ff4d00;}.token.function{color:#ffe33d;}.token.regex,.token.important,.token.variable{color:#d16969;}.token.important,.token.bold{font-weight:bold;}.token.italic{font-style:italic;}.token.constant{color:#9cdcfe;}.token.class-name{color:#4ec9b0;}.token.parameter{color:#9cdcfe;}.token.interpolation{color:#9cdcfe;}.token.punctuation.interpolation-punctuation{color:#569cd6;}.token.boolean{color:#569cd6;}.token.property{color:#9cdcfe;}.token.selector{color:#d7ba7d;}.token.tag{color:#ff5bd7;}.token.attr-name{color:#9cdcfe;}.token.attr-value{color:#ce9178;}.token.entity{color:#4ec9b0;cursor:unset;}.token.namespace{color:#4ec9b0;}.token-line{min-height:12px;}pre[class*='language-javascript'],code[class*='language-javascript']{color:#4ec9b0;}pre[class*='language-css'],code[class*='language-css']{color:#ce9178;}pre[class*='language-html'],code[class*='language-html']{color:#d4d4d4;}.language-html .token.punctuation{color:#808080;}pre[data-line]{position:relative;}pre[class*='language-'] > code[class*='language-']{position:relative;z-index:1;}.line-highlight{position:absolute;left:0;right:0;padding:inherit 0;margin-top:1em;background:#f7ebc6;box-shadow:inset 5px 0 0 #f7d87c;z-index:0;pointer-events:none;line-height:inherit;white-space:pre;};label:Code;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var Code = react__WEBPACK_IMPORTED_MODULE_1__["memo"](function (props) {
  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("div", {
    css: _ref5,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 106,
      columnNumber: 5
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])(prism_react_renderer__WEBPACK_IMPORTED_MODULE_7__["default"], Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({}, prism_react_renderer__WEBPACK_IMPORTED_MODULE_7__["defaultProps"], {
    code: props.children,
    language: "jsx",
    theme: undefined,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 326,
      columnNumber: 7
    }
  }), function (_ref17) {
    var className = _ref17.className,
        style = _ref17.style,
        tokens = _ref17.tokens,
        getLineProps = _ref17.getLineProps,
        getTokenProps = _ref17.getTokenProps;
    return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("pre", {
      className: className,
      style: style,
      __self: _this,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 333,
        columnNumber: 11
      }
    }, tokens.map(function (line, i) {
      return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("div", Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({
        key: i
      }, getLineProps({
        line: line,
        key: i
      }), {
        __self: _this,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 335,
          columnNumber: 15
        }
      }), line.map(function (token, key) {
        return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("span", Object(_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__["default"])({
          key: key
        }, getTokenProps({
          token: token,
          key: key
        }), {
          __self: _this,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 337,
            columnNumber: 19
          }
        }));
      }));
    }));
  }));
});

var _ref6 = false ? undefined : {
  name: "1enlj5-Layout",
  styles: "width:100%;max-width:1024px;margin:0 auto;display grid;grid-gap:2px;grid-template-rows:auto 1fr;grid-template-areas:\"head head\" \"main nav\" \"pad pad\";grid-template-columns:1fr minmax(240px,auto);grid-template-rows:auto 1fr auto;@media only screen and (max-width:640px){grid-template-areas:\"head\" \"main\" \"nav\" \"pad\";grid-template-rows:auto 1fr auto auto;grid-template-columns:1fr;};label:Layout;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref7 = false ? undefined : {
  name: "1oaxf21-Layout",
  styles: "border-bottom:var(--layout-border);grid-area:head;display:flex;align-items:center;padding:20px 0px 12px 0px;@media only screen and (max-width:1048px){padding:16px 8px 12px 8px;}@media only screen and (max-width:640px){padding:12px 8px 8px 8px;};label:Layout;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref8 = false ? undefined : {
  name: "1cpvi5c-Layout",
  styles: "margin-right:auto;display:flex;align-items:baseline;;label:Layout;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref9 = false ? undefined : {
  name: "w7epru-Layout",
  styles: "margin-bottom:0;;label:Layout;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref10 = false ? undefined : {
  name: "t9nf89-Layout",
  styles: "padding-left:4px;font-size:0.75rem;;label:Layout;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref11 = false ? undefined : {
  name: "1bpyj5w-Layout",
  styles: "grid-area:main;padding:16px;border:var(--layout-border);border-left:none;border-right:var(--none-on-mobile,var(--layout-border));;label:Layout;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref12 = false ? undefined : {
  name: "173w22j-Layout",
  styles: "padding:16px;border:var(--layout-border);border-right:none;border-left:var(--none-on-mobile,var(--layout-border));padding-bottom:48px;;label:Layout;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref13 = false ? undefined : {
  name: "98btqa-Layout",
  styles: "grid-area:pad;border-top:var(--layout-border);text-align:right;padding:4px;font-size:0.5rem;;label:Layout;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var Layout = function Layout(props) {
  var typography = react__WEBPACK_IMPORTED_MODULE_1__["useMemo"](function () {
    return new typography__WEBPACK_IMPORTED_MODULE_6___default.a({
      googleFonts: []
    });
  }, []);
  var strTypography = typography.toString().replace(/:first-child/g, ':first-of-type');
  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])(react__WEBPACK_IMPORTED_MODULE_1__["Fragment"], null, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])(next_head__WEBPACK_IMPORTED_MODULE_4___default.a, {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 362,
      columnNumber: 7
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("title", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 363,
      columnNumber: 9
    }
  }, "RGM - tiny react google map library"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("meta", {
    name: "viewport",
    content: "initial-scale=1.0, width=device-width",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 364,
      columnNumber: 9
    }
  })), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["Global"], {
    styles: /*#__PURE__*/Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["css"])(":root{--primary-color:#333;--secondary-color:#666;--layout-border:1px solid var(--primary-color);--font-size:16px;@media only screen and (max-width:640px){--none-on-mobile:none;--font-size:14px;}}body,html{margin:0;height:100%;color:var(--primary-color);font-size:var(--font-size);}html{-webkit-font-smoothing:antialiased;box-sizing:border-box;}html{overflow-y:scroll;}.gm-style{font:unset;font-family:-apple-system,'BlinkMacSystemFont','Segoe UI','Roboto','Oxygen','Ubuntu','Cantarell','Fira Sans','Droid Sans','Helvetica Neue',sans-serif;}*,*:before,*:after{box-sizing:inherit;min-width:0;}#__next{min-height:100%;display:flex;}", strTypography, " a{color:unset;}blockquote{margin:0 auto;padding:0.1rem 1rem;border-left:5px solid #eee;}blockquote:before{display:none;}blockquote:not(:first-of-type){margin-top:0.75em;};label:Layout;" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 366,
      columnNumber: 7
    }
  }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("div", {
    css: _ref6,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 439,
      columnNumber: 7
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("header", {
    css: _ref7,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 466,
      columnNumber: 9
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("div", {
    css: _ref8,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 484,
      columnNumber: 11
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("h1", {
    css: _ref9,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 491,
      columnNumber: 13
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("a", {
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 496,
      columnNumber: 15
    }
  }, "RGM")), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("div", {
    css: _ref10,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 498,
      columnNumber: 13
    }
  }, "react google map")), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("a", {
    href: "https://github.com/realadvisor/rgm",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 508,
      columnNumber: 11
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])(_icons__WEBPACK_IMPORTED_MODULE_9__["GithubIcon"], {
    size: 32,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 509,
      columnNumber: 13
    }
  }))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("main", {
    css: _ref11,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 512,
      columnNumber: 9
    }
  }, props.children), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("nav", {
    css: _ref12,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 523,
      columnNumber: 9
    }
  }, props.nav), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("div", {
    css: _ref13,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 535,
      columnNumber: 9
    }
  }, "EXAMPLES ARE PROVIDED UNDER THE", ' ', Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("a", {
    href: "https://github.com/realadvisor/rgm/blob/master/LICENSE-EXAMPLES",
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 545,
      columnNumber: 11
    }
  }, "BEER-WARE"), ' ', "LICENSE")));
};

var _ref14 = false ? undefined : {
  name: "e75gl0-Markdown",
  styles: "h1{font-size:1.5rem;};label:Markdown;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var Markdown = function Markdown(props) {
  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("div", {
    css: _ref14,
    dangerouslySetInnerHTML: {
      __html: props.children
    },
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 557,
      columnNumber: 5
    }
  });
};

var _ref15 = false ? undefined : {
  name: "ic0v2r-MenuLink",
  styles: "line-height:1.6rem;;label:MenuLink;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var _ref16 = false ? undefined : {
  name: "1lyd1d1-MenuLink",
  styles: "color:#000;text-decoration:none;;label:MenuLink;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
};

var MenuLink = function MenuLink(props) {
  var router = Object(next_router__WEBPACK_IMPORTED_MODULE_3__["useRouter"])();
  var pathname = router.pathname.replace(router.basePath, '');
  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("div", {
    css: _ref15,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 573,
      columnNumber: 5
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("span", {
    css: /*#__PURE__*/Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["css"])("visibility:", pathname === props.href ? 'visible' : 'hidden', ";;label:MenuLink;" + (false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 578,
      columnNumber: 7
    }
  }, "\u276F"), ' ', Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])(next_link__WEBPACK_IMPORTED_MODULE_2___default.a, {
    href: props.href,
    passHref: true,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 585,
      columnNumber: 7
    }
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_5__["jsx"])("a", {
    css: pathname === props.href ? _ref16 : null,
    __self: _this,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 586,
      columnNumber: 9
    }
  }, props.children)));
};

/***/ })

})
//# sourceMappingURL=_app.js.335c8abeb19507397093.hot-update.js.map