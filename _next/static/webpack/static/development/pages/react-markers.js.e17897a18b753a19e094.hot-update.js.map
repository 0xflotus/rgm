{"version":3,"file":"static/webpack/static/development/pages/react-markers.js.e17897a18b753a19e094.hot-update.js","sources":["webpack:///./src/google-map.js"],"sourcesContent":["// @flow\n\nimport * as React from 'react';\nimport type {\n  GoogleMap,\n  GoogleMapOptions,\n  GoogleMapsApi,\n} from './google-types.js';\n\ntype MapProps = {|\n  // https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions\n  options: GoogleMapOptions | (HTMLDivElement => GoogleMapOptions),\n  // window.google.maps\n  api: GoogleMapsApi,\n  children?: React.Node,\n|};\n\ntype MapContextType = {|\n  api: GoogleMapsApi,\n  map: GoogleMap | null,\n|};\n\n// $FlowFixMe\nconst MapContext = React.createContext<MapContextType>((null: any));\n\nexport type GoogleMapRef = React.ElementRef<\n  React.AbstractComponent<MapProps, GoogleMap>,\n>;\n\nconst warnOnce = (() => {\n  const map = {};\n\n  return (str: string) => {\n    if (map[str] == null) {\n      map[str] = true;\n      console.warn(str);\n    }\n  };\n})();\n\nconst STYLE = { width: '100%', height: '100%' };\n\nexport const Map = React.forwardRef<MapProps, GoogleMap>((props, ref) => {\n  const element = React.useRef(null);\n  const guardRef = React.useRef(false);\n  const [map, setMap] = React.useState<GoogleMap | null>(null);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const apiRef = React.useRef(props.api);\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const optionsRef = React.useRef(props.options);\n\n    if (apiRef.current !== props.api) {\n      warnOnce(`\n        api prop has changed.\n        If it's desired behaviour please remount your component\n        using key={hash(api)} on your component.\n      `);\n    }\n\n    if (\n      typeof props.options !== 'function' &&\n      optionsRef.current !== props.options\n    ) {\n      warnOnce(`\n        options prop has changed.\n        If it's desired behaviour please use imperative api, i.e.\n\n        mapRef.current.apply(map =>  map.setOptions({...}));\n      `);\n    }\n  }\n\n  React.useImperativeHandle(ref, () => map, [map]);\n\n  React.useEffect(\n    () => {\n      if (element.current && !guardRef.current) {\n        const lmap = new props.api.Map(\n          element.current,\n          typeof props.options === 'function'\n            ? props.options(element.current)\n            : props.options,\n        );\n\n        guardRef.current = true;\n        setMap(lmap);\n\n        return () => {};\n      }\n    },\n    // eslint is wrong here\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [props.api, props.options],\n  );\n\n  const ctxValue = React.useMemo(() => ({ map, api: props.api }), [\n    map,\n    props.api,\n  ]);\n\n  return (\n    <MapContext.Provider value={ctxValue}>\n      <div style={STYLE} ref={element} />\n      {map && props.children}\n    </MapContext.Provider>\n  );\n});\n\nexport const useMap = () => React.useContext(MapContext);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;;AAoBA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAIA;AAMA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AAOA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AAAA;AAAA;;;;A","sourceRoot":""}