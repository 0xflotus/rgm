{"version":3,"file":"static/webpack/static/development/pages/index.js.acf2cac994c914105ae6.hot-update.js","sources":["webpack:///./dev-src/hooks.js"],"sourcesContent":["// @flow\n\nimport { createNanoEvents } from 'nanoevents';\nimport * as React from 'react';\nimport type { GoogleMapsApi } from 'rgm';\n\ntype State = 'loading' | 'done' | 'failed';\n\nconst cachedStates = new Map<string, State>();\nconst cachedElements = new Map<string, HTMLScriptElement>();\n\nexport const useScript = (src: string): State => {\n  const [state, setState] = React.useState('loading');\n\n  React.useEffect(() => {\n    let mounted = true;\n\n    const handleLoad = () => {\n      cachedStates.set(src, 'done');\n      if (mounted) {\n        setState('done');\n      }\n    };\n\n    const handleError = () => {\n      cachedStates.set(src, 'failed');\n      if (mounted) {\n        setState('failed');\n      }\n    };\n\n    const cachedState: State | void = cachedStates.get(src);\n\n    if (cachedState == null) {\n      const newElement = document.createElement('script');\n      newElement.async = true;\n      newElement.defer = true;\n      // $FlowFixMe\n      newElement.importance = 'low';\n      newElement.src = src;\n      newElement.addEventListener('load', handleLoad);\n      newElement.addEventListener('error', handleError);\n      cachedStates.set(src, 'loading');\n      cachedElements.set(src, newElement);\n      // inject to start loading\n      if (document.body) {\n        document.body.appendChild(newElement);\n      }\n    }\n\n    if (cachedState === 'loading') {\n      const element = cachedElements.get(src);\n      if (element) {\n        element.addEventListener('load', handleLoad);\n        element.addEventListener('error', handleError);\n        return () => {\n          element.removeEventListener('load', handleLoad);\n          element.removeEventListener('error', handleError);\n        };\n      }\n    }\n\n    if (cachedState === 'done') {\n      setState('done');\n    }\n\n    if (cachedState === 'failed') {\n      setState('failed');\n    }\n\n    return () => {\n      mounted = false;\n    };\n  }, [src]);\n\n  return state;\n};\n\nconst map_ = {\n  emitter: createNanoEvents(),\n  api: (null: GoogleMapsApi | null),\n  error: (null: Error | null),\n};\n\nif (typeof window !== 'undefined') {\n  const head = document.getElementsByTagName('head')[0];\n\n  const insertBefore = head.insertBefore;\n  const appendChild = head.appendChild;\n\n  head.appendChild = elt => {\n    if (elt.src.indexOf('ViewportInfoService.GetViewportInfo') > -1) {\n      return;\n    }\n    appendChild.call(head, elt);\n  };\n  // Prevent google map load roboto font\n  // $FlowFixMe\n  head.insertBefore = function (newElement, referenceElement) {\n    if (\n      newElement.href &&\n      newElement.href.indexOf('//fonts.googleapis.com/css?family=Roboto') > -1\n    ) {\n      return;\n    }\n    insertBefore.call(head, newElement, referenceElement);\n  };\n\n  window.gm_authFailure = () => {\n    map_.error = new Error(\n      'Gmap encountered auth error. See console for more details.',\n    );\n    map_.api = null;\n    map_.emitter.emit('change');\n  };\n  window.rgm_mapLoaded = () => {\n    if (map_.error == null) {\n      map_.api = window.google.maps;\n    }\n\n    map_.emitter.emit('change');\n  };\n}\n\nlet alertGuard_ = true;\n\nexport const useGoogleApiLoader = (): null | GoogleMapsApi => {\n  if (process.env.GOOGLE_API_KEY == null) {\n    throw new Error(\n      'You must have GOOGLE_API_KEY environment variable defined',\n    );\n  }\n  const [api, setApi] = React.useState(map_.api);\n\n  const key = process.env.GOOGLE_API_KEY;\n  if (key == null) {\n    throw new Error('process.env.GOOGLE_API_KEY is not provided');\n  }\n  const url = `https://maps.googleapis.com/maps/api/js?key=${key}&libraries=places&callback=rgm_mapLoaded`;\n  const state = useScript(url);\n\n  React.useEffect(() => {\n    if (api == null && map_.api != null) {\n      setApi(map_.api);\n    }\n\n    if (state === 'failed') {\n      if (process.env.NODE_ENV !== 'production') {\n        if (alertGuard_) {\n          alert('unable to load script');\n          alertGuard_ = false;\n        }\n      }\n    }\n\n    return map_.emitter.on('change', () => {\n      setApi(map_.api);\n\n      if (process.env.NODE_ENV !== 'production' && map_.error != null) {\n        // In real app its on you how to process this error\n        // usually it means that no quota left or your devops is idiot or any other issue\n        // report this somehow if needed.\n        if (alertGuard_) {\n          alert(map_.error.message);\n          alertGuard_ = false;\n        }\n      }\n    });\n  }, [api, state]);\n\n  return api;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;AAEA;AACA;AAKA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAHA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AADA;AACA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AANA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;A","sourceRoot":""}