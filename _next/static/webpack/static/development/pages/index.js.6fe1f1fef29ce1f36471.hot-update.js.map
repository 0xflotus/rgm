{"version":3,"file":"static/webpack/static/development/pages/index.js.6fe1f1fef29ce1f36471.hot-update.js","sources":["webpack:///./dev-src/controls.js"],"sourcesContent":["// @flow\nimport * as React from 'react';\nimport Link from 'next/link';\nimport { useRouter } from 'next/router';\nimport Head from 'next/head';\nimport { Global, css } from '@emotion/core';\nimport Typography from 'typography';\n// $FlowFixMe too many typings\nimport Highlight, { defaultProps } from 'prism-react-renderer';\nimport { ratio } from './mixins';\nimport { GithubIcon } from './icons';\n\nexport const Select = (props: {|\n  value: string,\n  onChange: string => void,\n  options: $ReadOnlyArray<string>,\n|}) => {\n  return (\n    // eslint-disable-next-line\n    <select value={props.value} onChange={e => props.onChange(e.target.value)}>\n      {props.options.map(o => (\n        <option key={o} value={o}>\n          {o}\n        </option>\n      ))}\n    </select>\n  );\n};\n\nexport const Checkbox = (props: {|\n  value: boolean,\n  onChange: boolean => void,\n  id: string,\n  children: React.Node,\n|}) => {\n  return (\n    <div\n      css={css`\n        display: flex;\n        align-items: baseline;\n      `}\n    >\n      <input\n        id={props.id}\n        type=\"checkbox\"\n        checked={props.value}\n        onChange={e => props.onChange(e.target.checked)}\n      />\n      <label\n        css={css`\n          padding-left: 4px;\n        `}\n        htmlFor={props.id}\n      >\n        {props.children}\n      </label>\n    </div>\n  );\n};\n\nexport const Stack = (props: {| children: React.Node |}) => {\n  return (\n    <div\n      css={css`\n        display: grid;\n        grid-gap: 24px;\n        > div:not(:first-of-type),\n        > pre {\n          box-shadow: 0 0 0 2px white, 0 0 0 3px var(--secondary-color),\n            0 0 0 5px white, 0 0 0 6px var(--secondary-color);\n        }\n      `}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport const Info = (props: {| children: React.Node |}) => {\n  return (\n    <div\n      css={css`\n        padding: 8px;\n        background-color: #fafafa;\n      `}\n    >\n      {props.children}&#8203;\n    </div>\n  );\n};\n\nexport const Ratio = (props: {| value: number, children: React.Node |}) => {\n  return (\n    <div\n      css={css`\n        ${ratio(props.value)}\n      `}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport const Code = React.memo<{| children: string |}>(props => {\n  return (\n    <div\n      css={css`\n        pre[class*='language-'],\n        code[class*='language-'] {\n          color: #d4d4d4;\n          font-size: 0.8rem;\n          text-shadow: none;\n          font-family: Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace;\n          direction: ltr;\n          text-align: left;\n          white-space: pre;\n          word-spacing: normal;\n          word-break: normal;\n          line-height: 1.5;\n          -moz-tab-size: 4;\n          -o-tab-size: 4;\n          tab-size: 4;\n          -webkit-hyphens: none;\n          -moz-hyphens: none;\n          -ms-hyphens: none;\n          hyphens: none;\n        }\n\n        pre[class*='language-']::selection,\n        code[class*='language-']::selection {\n          text-shadow: none;\n          background: #b3d4fc;\n        }\n\n        @media print {\n          pre[class*='language-'],\n          code[class*='language-'] {\n            text-shadow: none;\n          }\n        }\n\n        pre[class*='language-'] {\n          padding: 1em;\n          margin: 0;\n          overflow: auto;\n          background: #1e1e1e;\n        }\n\n        :not(pre) > code[class*='language-'] {\n          padding: 0.1em 0.3em;\n          border-radius: 0.3em;\n          color: #db4c69;\n          background: #f9f2f4;\n        }\n\n        .namespace {\n          opacity: 0.7;\n        }\n\n        .token.comment,\n        .token.prolog,\n        .token.doctype,\n        .token.cdata {\n          color: #6a9955;\n        }\n\n        .token.punctuation {\n          color: #d4d4d4;\n        }\n\n        .token.property,\n        .token.tag,\n        .token.boolean,\n        .token.number,\n        .token.constant,\n        .token.symbol,\n        .token.deleted {\n          color: #b5cea8;\n        }\n\n        .token.selector,\n        .token.attr-name,\n        .token.string,\n        .token.char,\n        .token.builtin,\n        .token.inserted {\n          color: #7dd823;\n        }\n\n        .token.operator,\n        .token.entity,\n        .token.url,\n        .language-css .token.string,\n        .style .token.string {\n          color: #d4d4d4;\n          background: #1e1e1e;\n        }\n\n        .token.atrule,\n        .token.attr-value,\n        .token.keyword {\n          color: #ff4d00;\n        }\n\n        .token.function {\n          color: #ffe33d;\n        }\n\n        .token.regex,\n        .token.important,\n        .token.variable {\n          color: #d16969;\n        }\n\n        .token.important,\n        .token.bold {\n          font-weight: bold;\n        }\n\n        .token.italic {\n          font-style: italic;\n        }\n\n        .token.constant {\n          color: #9cdcfe;\n        }\n\n        .token.class-name {\n          color: #4ec9b0;\n        }\n\n        .token.parameter {\n          color: #9cdcfe;\n        }\n\n        .token.interpolation {\n          color: #9cdcfe;\n        }\n\n        .token.punctuation.interpolation-punctuation {\n          color: #569cd6;\n        }\n\n        .token.boolean {\n          color: #569cd6;\n        }\n\n        .token.property {\n          color: #9cdcfe;\n        }\n\n        .token.selector {\n          color: #d7ba7d;\n        }\n\n        .token.tag {\n          color: #ff5bd7;\n        }\n\n        .token.attr-name {\n          color: #9cdcfe;\n        }\n\n        .token.attr-value {\n          color: #ce9178;\n        }\n\n        .token.entity {\n          color: #4ec9b0;\n          cursor: unset;\n        }\n\n        .token.namespace {\n          color: #4ec9b0;\n        }\n\n        .token-line {\n          min-height: 12px;\n        }\n\n        pre[class*='language-javascript'],\n        code[class*='language-javascript'] {\n          color: #4ec9b0;\n        }\n\n        pre[class*='language-css'],\n        code[class*='language-css'] {\n          color: #ce9178;\n        }\n\n        pre[class*='language-html'],\n        code[class*='language-html'] {\n          color: #d4d4d4;\n        }\n\n        .language-html .token.punctuation {\n          color: #808080;\n        }\n        /*********************************************************\n* Line highlighting\n*/\n        pre[data-line] {\n          position: relative;\n        }\n\n        pre[class*='language-'] > code[class*='language-'] {\n          position: relative;\n          z-index: 1;\n        }\n\n        .line-highlight {\n          position: absolute;\n          left: 0;\n          right: 0;\n          padding: inherit 0;\n          margin-top: 1em;\n          background: #f7ebc6;\n          box-shadow: inset 5px 0 0 #f7d87c;\n          z-index: 0;\n          pointer-events: none;\n          line-height: inherit;\n          white-space: pre;\n        }\n      `}\n    >\n      <Highlight\n        {...defaultProps}\n        code={props.children}\n        language=\"jsx\"\n        theme={undefined}\n      >\n        {({ className, style, tokens, getLineProps, getTokenProps }) => (\n          <pre className={className} style={style}>\n            {tokens.map((line, i) => (\n              <div key={i} {...getLineProps({ line, key: i })}>\n                {line.map((token, key) => (\n                  <span key={key} {...getTokenProps({ token, key })} />\n                ))}\n              </div>\n            ))}\n          </pre>\n        )}\n      </Highlight>\n    </div>\n  );\n});\n\nexport const Layout = (props: {| children: React.Node, nav: React.Node |}) => {\n  const typography = React.useMemo(\n    () =>\n      new Typography({\n        headerFontFamily: ['Roboto', 'Helvetica', 'Arial', 'sans-serif'],\n        bodyFontFamily: ['Helvetica', 'Arial', 'sans-serif'],\n        googleFonts: [],\n      }),\n    [],\n  );\n\n  const strTypography = typography\n    .toString()\n    .replace(/:first-child/g, ':first-of-type');\n  return (\n    <>\n      <Head>\n        <title>RGM - tiny react google map library</title>\n        <meta name=\"viewport\" content=\"initial-scale=1.0, width=device-width\" />\n      </Head>\n      <Global\n        styles={css`\n          :root {\n            --primary-color: #333;\n            --secondary-color: #666;\n\n            --layout-border: 1px solid var(--primary-color);\n            --font-size: 16px;\n\n            @media only screen and (max-width: 640px) {\n              --none-on-mobile: none;\n              --font-size: 14px;\n            }\n          }\n\n          body,\n          html {\n            margin: 0;\n            height: 100%;\n            color: var(--primary-color);\n            font-size: var(--font-size);\n          }\n\n          html {\n            -webkit-font-smoothing: antialiased;\n            box-sizing: border-box;\n          }\n\n          html {\n            overflow-y: scroll;\n          }\n\n          /* dont allow google to change */\n          .gm-style {\n            font: unset;\n          }\n\n          *,\n          *:before,\n          *:after {\n            box-sizing: inherit;\n            min-width: 0;\n          }\n\n          #__next {\n            min-height: 100%;\n            display: flex;\n          }\n\n          ${strTypography}\n\n          a {\n            color: unset;\n          }\n\n          blockquote {\n            margin: 0 auto;\n            padding: 0.1rem 1rem;\n            border-left: 5px solid #eee;\n          }\n\n          blockquote:before {\n            display: none;\n          }\n\n          blockquote:not(:first-of-type) {\n            margin-top: 0.75em;\n          }\n        `}\n      />\n      <div\n        css={css`\n      width: 100%;\n      max-width: 1024px;\n      margin: 0 auto;\n\n      display grid;\n      grid-gap: 2px;\n      grid-template-rows: auto 1fr;\n      grid-template-areas:\n                   \"head head\"\n                   \"main nav\"\n                   \"pad pad\";\n      grid-template-columns: 1fr minmax(240px, auto);\n      grid-template-rows: auto 1fr auto;\n\n      @media only screen and (max-width: 640px) {\n        grid-template-areas:\n                   \"head\"\n                   \"main\"\n                   \"nav\"\n                   \"pad\";\n        grid-template-rows: auto 1fr auto auto;\n        grid-template-columns: 1fr;\n      }\n    `}\n      >\n        <header\n          css={css`\n            border-bottom: var(--layout-border);\n            grid-area: head;\n            display: flex;\n            align-items: center;\n\n            padding: 20px 0px 12px 0px;\n\n            @media only screen and (max-width: 1048px) {\n              padding: 16px 8px 12px 8px;\n            }\n\n            @media only screen and (max-width: 640px) {\n              padding: 12px 8px 8px 8px;\n            }\n          `}\n        >\n          <div\n            css={css`\n              margin-right: auto;\n              display: flex;\n              align-items: baseline;\n            `}\n          >\n            <h1\n              css={css`\n                margin-bottom: 0;\n              `}\n            >\n              RGM\n            </h1>\n            <div\n              css={css`\n                padding-left: 4px;\n                font-size: 0.75rem;\n              `}\n            >\n              react google map\n            </div>\n          </div>\n\n          <a href=\"https://github.com/realadvisor/rgm\">\n            <GithubIcon size={32} />\n          </a>\n        </header>\n        <main\n          css={css`\n            grid-area: main;\n            padding: 16px;\n            border: var(--layout-border);\n            border-left: none;\n            border-right: var(--none-on-mobile, var(--layout-border));\n          `}\n        >\n          {props.children}\n        </main>\n        <nav\n          css={css`\n            padding: 16px;\n            border: var(--layout-border);\n            border-right: none;\n            border-left: var(--none-on-mobile, var(--layout-border));\n            /* clickable on mobile */\n            padding-bottom: 48px;\n          `}\n        >\n          {props.nav}\n        </nav>\n        <div\n          css={css`\n            grid-area: pad;\n            border-top: var(--layout-border);\n            text-align: right;\n            padding: 4px;\n            font-size: 0.5rem;\n          `}\n        >\n          EXAMPLES ARE PROVIDED UNDER THE{' '}\n          <a href=\"https://en.wikipedia.org/wiki/Beerware\">BEER-WARE</a> LICENSE\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport const Markdown = (props: {| children: string |}) => {\n  return (\n    <div\n      css={css`\n        h1 {\n          font-size: 1.5rem;\n        }\n      `}\n      dangerouslySetInnerHTML={{ __html: props.children }}\n    />\n  );\n};\n\nexport const MenuLink = (props: {| children: React.Node, href: string |}) => {\n  const router = useRouter();\n\n  return (\n    <div\n      css={css`\n        line-height: 1.6rem;\n      `}\n    >\n      <span\n        css={css`\n          visibility: ${router.pathname === props.href ? 'visible' : 'hidden'};\n        `}\n      >\n        ❯\n      </span>{' '}\n      <Link href={props.href} passHref>\n        <a\n          css={\n            router.pathname === props.href\n              ? css`\n                  color: #000;\n                  text-decoration: none;\n                `\n              : null\n          }\n        >\n          {props.children}\n        </a>\n      </Link>\n    </div>\n  );\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAKA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAHA;AAUA;AACA;;;;;;;;;;;;;;;AACA;AAMA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAGA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;;;;;;;;AACA;AACA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;;;;;;;;AACA;AACA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAEA;AACA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;;;;;;;;AACA;AACA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8NA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAFA;AAFA;AAcA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AAEA;AACA;AACA;AAHA;AADA;AASA;AAGA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4BA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAmBA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAaA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;;;;;;;;AACA;AACA;AAEA;AAKA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;;;;;;;;;;;;;;;AACA;AACA;AAEA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;;;;A","sourceRoot":""}